{
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },

  "parser": "babel-eslint",

  "plugins": ["react"],

  "ecmaFeatures": {
    "arrowFunctions": true,
    "binaryLiterals": true,
    "blockBindings": true,
    "classes": true,
    "defaultParams": true,
    "destructuring": true,
    "forOf": true,
    "generators": true,
    "modules": true,
    "objectLiteralComputedProperties": true,
    "objectLiteralDuplicateProperties": true,
    "objectLiteralShorthandMethods": true,
    "objectLiteralShorthandProperties": true,
    "octalLiterals": true,
    "regexUFlag": true,
    "regexYFlag": true,
    "spread": true,
    "superInFunctions": true,
    "templateStrings": true,
    "unicodeCodePointEscapes": true,
    "globalReturn": true,
    "jsx": true
  },

  "rules": {

    //Possible Errors
    // The following rules point out areas where you might have made mistakes.
    "comma-dangle": "error", // disallow or enforce trailing commas
    "no-cond-assign": "error", // disallow assignment in conditional expressions
    "no-console": "error", // disallow use of console
    "no-constant-condition": "error", // disallow use of constant expressions in conditions
    "no-control-regex": "error", // disallow control characters in regular expressions
    "no-debugger": "error", // disallow use of debugger
    "no-dupe-args": "error", // disallow duplicate arguments in functions
    "no-dupe-keys": "error", // disallow duplicate keys when creating object literals
    "no-duplicate-case": "error", // disallow a duplicate case label.
    "no-empty": "error", // disallow empty block statements
    "no-empty-character-class": "error", // disallow the use of empty character classes in regular expressions
    "no-ex-assign": "error", // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": "error", // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": "error", // disallow unnecessary parentheses
    "no-extra-semi": "error", // disallow unnecessary semicolons
    "no-func-assign": "error", // disallow overwriting functions written as function declarations
    "no-inner-declarations": "error", // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": "error", // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": "error", // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": "error", // disallow negation of the left operand of an in expression
    "no-obj-calls": "error", // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": "error", // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": "error", // disallow sparse arrays
    "no-unexpected-multiline": "error", // Avoid code that looks like two expressions but is actually one
    "no-unreachable": "error", // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": "error", // disallow comparisons with the value NaN
    "valid-jsdoc": "error", // Ensure JSDoc comments are valid
    "valid-typeof": "error", // Ensure that the results of typeof are compared against a valid string


    // Best Practices
    // These are rules designed to prevent you from making mistakes.
    // They either prescribe a better way of doing something or help you avoid footguns.
    "accessor-pairs": "error", // Enforces getter/setter pairs in objects
    "array-callback-return": "error", // Enforces return statements in callbacks of array's methods
    "block-scoped-var": "error", // treat var statements as if they were block scoped
    "complexity": "off", // specify the maximum cyclomatic complexity allowed in a program
    "consistent-return": "error", // require return statements to either always or never specify values
    "curly": "error", // specify curly brace conventions for all control statements
    "default-case": "error", // require default case in switch statements
    "dot-location": ["error", "property"], // enforces consistent newlines before or after dots
    "dot-notation": "error", // encourages use of dot notation whenever possible
    "eqeqeq": "error", // require the use of === and !==
    "guard-for-in": "error", // make sure for-in loops have an if statement
    "no-alert": "error", // disallow the use of alert, confirm, and prompt
    "no-caller": "error", // disallow use of arguments.caller or arguments.callee
    "no-case-declarations": "error", // disallow lexical declarations in case clauses
    "no-div-regex": "error", // disallow division operators explicitly at beginning of regular expression
    "no-else-return": "error", // disallow else after a return in an if
    "no-empty-function": "error", // disallow use of empty functions
    "no-empty-pattern": "error", // disallow use of empty destructuring patterns
    "no-eq-null": "error", // disallow comparisons to null without a type-checking operator
    "no-eval": "error", // disallow use of eval()
    "no-extend-native": "error", // disallow adding to native types
    "no-extra-bind": "error", // disallow unnecessary function binding
    "no-extra-label": "error", // disallow unnecessary labels
    "no-fallthrough": "error", // disallow fallthrough of case statements
    "no-floating-decimal": "error", // disallow the use of leading or trailing decimal points in numeric literals
    "no-implicit-coercion": "error", // disallow the type conversions with shorter notations
    "no-implicit-globals": "error", // disallow var and named functions in global scope
    "no-implied-eval": "error", // disallow use of eval()-like methods
    "no-invalid-this": "error", // disallow this keywords outside of classes or class-like objects
    "no-iterator": "error", // disallow usage of __iterator__ property
    "no-labels": "error", // disallow use of labeled statements
    "no-lone-blocks": "error", // disallow unnecessary nested blocks
    "no-loop-func": "error", // disallow creation of functions within loops
    "no-magic-numbers": "off", // disallow the use of magic numbers
    "no-multi-spaces": "error", // disallow use of multiple spaces
    "no-multi-str": "error", // disallow use of multiline strings
    "no-native-reassign": "error", // disallow reassignments of native objects
    "no-new": "error", // disallow use of the new operator when not part of an assignment or comparison
    "no-new-func": "error", // disallow use of new operator for Function object
    "no-new-wrappers": "error", // disallows creating new instances of String,Number, and Boolean
    "no-octal": "error", // disallow use of octal literals
    "no-octal-escape": "error", // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \"error"51";
    "no-param-reassign": "error", // disallow reassignment of function parameters
    "no-process-env": "off", // disallow use of process.env
    "no-proto": "error", // disallow usage of __proto__ property
    "no-redeclare": "error", // disallow declaring the same variable more than once
    "no-return-assign": "error", // disallow use of assignment in return statement
    "no-script-url": "error", // disallow use of javascript: urls.
    "no-self-assign": "error", // disallow assignments where both sides are exactly the same
    "no-self-compare": "error", // disallow comparisons where both sides are exactly the same
    "no-sequences": "error", // disallow use of the comma operator
    "no-throw-literal": "error", // restrict what can be thrown as an exception
    "no-unmodified-loop-condition": "error", // disallow unmodified conditions of loops
    "no-unused-expressions": "error", // disallow usage of expressions in statement position
    "no-unused-labels": "error", // disallow unused labels
    "no-useless-call": "error", // disallow unnecessary .call() and .apply()
    "no-useless-concat": "error", // disallow unnecessary concatenation of literals or template literals
    "no-void": "error", // disallow use of the void operator
    "no-warning-comments": "off", // disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
    "no-with": "error", // disallow use of the with statement
    "radix": "error", // require use of the second argument for parseInt()
    "vars-on-top": "error", // require declaration of all vars at the top of their containing scope
    "wrap-iife": "error", // require immediate function invocation to be wrapped in parentheses
    "yoda": "error", // require or disallow Yoda conditions


    // Strict Mode
    // These rules relate to using strict mode.
    "strict": "off", // controls location of Use Strict Directives. "off": required by babel-eslint


    // Variables
    // These rules have to do with variable declarations.
    "init-declarations": "off", // enforce or disallow variable initializations at definition
    "no-catch-shadow": "error", // disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-delete-var": "error", // disallow deletion of variables
    "no-label-var": "error", // disallow labels that share a name with a variable
    "no-restricted-globals": "off", // restrict usage of specified global variables
    "no-shadow": "error", // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": "error", // disallow shadowing of names such as arguments
    "no-undef": "error", // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": "error", // disallow use of undefined when initializing variables
    "no-undefined": "error", // disallow use of undefined variable
    "no-unused-vars": ["error", {"argsIgnorePattern": "^_", "varsIgnorePattern": "^_"}], // disallow declaration of variables that are not used in the code
    "no-use-before-define": "error", // disallow use of variables before they are defined


    // Node.js and CommonJS
    // These rules are specific to JavaScript running on Node.js or using CommonJS in the browser.
    "callback-return": "error", // enforce return after a callback
    "global-require": "off", // enforce require() on top-level module scope
    "handle-callback-err": "error", // enforce error handling in callbacks
    "no-mixed-requires": "error", // disallow mixing regular variable and require declarations
    "no-new-require": "error", // disallow use of new operator with the require function
    "no-path-concat": "error", // disallow string concatenation with __dirname and __filename
    "no-process-exit": "off", // disallow process.exit()
    "no-restricted-imports": "off", // restrict usage of specified node imports
    "no-restricted-modules": "off", // restrict usage of specified node modules
    "no-sync": "error", // disallow use of synchronous methods


    // Stylistic Issues
    // These rules are purely matters of style and are quite subjective.
    "array-bracket-spacing": ["error", "never"], // enforce spacing inside array brackets
    "block-spacing": ["error", "always"], // disallow or enforce spaces inside of single line blocks
    "brace-style": "error", // enforce one true brace style
    "camelcase": "error", // require camel case names
    "comma-spacing": ["error", {"before": false, "after": true}], // enforce spacing before and after comma
    "comma-style": ["error", "last"], // enforce one true comma style
    "computed-property-spacing": ["error", "never"], // require or disallow padding inside computed properties
    "consistent-this": ["error", "_this"], // enforce consistent naming when capturing the current execution context
    "eol-last": "error", // enforce newline at the end of file, with no multiple empty lines
    "func-names": "off", // require function expressions to have a name
    "func-style": "off", // enforce use of function declarations or expressions
    "id-blacklist": "off", // blacklist certain identifiers to prevent them being used
    "id-length": "off", // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    "id-match": "off", // require identifiers to match the provided regular expression
    "indent": ["error", "space", {"SwitchCase": 1}], // specify tab or space width for your code
    "jsx-quotes": ["error", "prefer-double"], // specify whether double or single quotes should be used in JSX attributes
    "key-spacing": ["error", {"beforeColon": false, "afterColon": true}], // enforce spacing between keys and values in object literal properties
    "keyword-spacing": ["error", {"before": true, "after": true}], // enforce spacing before and after keywords
    "linebreak-style": ["error", "unix"], // disallow mixed 'LF' and 'CRLF' as linebreaks
    "lines-around-comment": ["error", {"beforeBlockComment": true, "afterBlockComment": false, "afterLineComment": false}], // enforce empty lines around comments
    "max-depth": ["error", 3], // specify the maximum depth that blocks can be nested
    "max-len": ["error", 100, 2], // specify the maximum length of a line in your program
    "max-nested-callbacks": ["error", 3], // specify the maximum depth callbacks can be nested
    "max-params": ["error", 5], // limits the number of parameters that can be used in the function declaration
    "max-statements": "off", // specify the maximum number of statement allowed in a function
    "new-cap": ["error", {"newIsCap": true, "capIsNew": false}], // require a capital letter for constructors
    "new-parens": "error", // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": ["error", "always"], // require or disallow an empty newline after variable declarations
    "newline-per-chained-call": "off", // enforce newline after each call when chaining the calls
    "no-array-constructor": "error", // disallow use of the Array constructor
    "no-bitwise": "error", // disallow use of bitwise operators
    "no-continue": "error", // disallow use of the continue statement
    "no-inline-comments": "error", // disallow comments inline after code
    "no-lonely-if": "error", // disallow if as the only statement in an else block
    "no-mixed-spaces-and-tabs": "error", // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": ["error", {"max": 2}], // disallow multiple empty lines
    "no-negated-condition": "error", // disallow negated conditions
    "no-nested-ternary": "error", // disallow nested ternary expressions
    "no-new-object": "error", // disallow the use of the Object constructor
    "no-restricted-syntax": ["error", "WithStatement"], // disallow use of certain syntax in code
    "no-spaced-func": "error", // disallow space between function identifier and application
    "no-ternary": "off", // disallow the use of ternary operators
    "no-trailing-spaces": "error", // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": "error", // disallow dangling underscores in identifiers
    "no-unneeded-ternary": "error", // disallow the use of ternary operators when a simpler alternative exists
    "no-whitespace-before-property": "error", // disallow whitespace before properties
    "object-curly-spacing": ["error", "always"], // require or disallow padding inside curly braces
    "one-var": ["error", "never"], // require or disallow one variable declaration per function
    "one-var-declaration-per-line": "error", // require or disallow an newline around variable declarations
    "operator-assignment": ["error", "never"], // require assignment operator shorthand where possible or prohibit it entirely
    "operator-linebreak": ["error", "after"], // enforce operators to be placed before or after line breaks
    "padded-blocks": ["error", "never"], // enforce padding within blocks
    "quote-props": ["error", "as-needed"], // require quotes around object literal property names
    "quotes": ["error", "single"], // specify whether backticks, double or single quotes should be used
    "require-jsdoc": "off", // Require JSDoc comment
    "semi": ["error", "always"], // require or disallow use of semicolons instead of ASI
    "semi-spacing": ["error", {"before": false, "after": true}], // enforce spacing before and after semicolons
    "sort-imports": "off", // sort import declarations within module
    "sort-vars": "off", // sort variables within the same declaration block
    "space-before-blocks": ["error", "always"], // require or disallow a space before blocks
    "space-before-function-paren": ["error", {"anonymous": "always", "named": "never"}], // require or disallow a space before function opening parenthesis
    "space-in-parens": ["error", "never"], // require or disallow spaces inside parentheses
    "space-infix-ops": "error", // require spaces around operators
    "space-unary-ops": ["error", {"words": true, "nonwords": false}], // require or disallow spaces before/after unary operators
    "spaced-comment": ["error", "always"], // require or disallow a space immediately following the // or /* in a comment
    "wrap-regex": "off", // require regex literals to be wrapped in parentheses


    // ECMAScript 6
    // These rules are only relevant to ES6 environments and are off by default.
    "arrow-body-style": ["error", "as-needed"], // require braces in arrow function body
    "arrow-parens": ["error", "as-needed"], // require parens in arrow function arguments
    "arrow-spacing": "error", // require space before/after arrow function's arrow
    "constructor-super": "error", // verify calls of super() in constructors
    "generator-star-spacing": ["error", "before"], // enforce spacing around the * in generator functions
    "no-class-assign": "error", // disallow modifying variables of class declarations
    "no-confusing-arrow": "off", // disallow arrow functions where they could be confused with comparisons
    "no-const-assign": "error", // disallow modifying variables that are declared using const
    "no-dupe-class-members": "error", // disallow duplicate name in class members
    "no-new-symbol": "error", // disallow use of the new operator with the Symbol object
    "no-this-before-super": "error", // disallow use of this/super before calling super() in constructors
    "no-useless-constructor": "error", // disallow unnecessary constructor
    "no-var": "error", // require let or const instead of var
    "object-shorthand": "error", // require method and property shorthand syntax for object literals
    "prefer-arrow-callback": "error", // suggest using arrow functions as callbacks
    "prefer-const": "error", // suggest using const declaration for variables that are never modified after declared
    "prefer-reflect": "off", // suggest using Reflect methods where applicable
    "prefer-rest-params": "error", // suggest using the rest parameters instead of arguments
    "prefer-spread": "error", // suggest using the spread operator instead of .apply()
    "prefer-template": "error", // suggest using template literals instead of strings concatenation
    "require-yield": "error", // disallow generator functions that do not have yield
    "template-curly-spacing": "error", // enforce spacing around embedded expressions of template strings
    "yield-star-spacing": "error", // enforce spacing around the * in yield* expressions


    // eslint-plugin-react
    // List of supported rules
    "react/display-name": "off", // Prevent missing displayName in a React component definition
    "react/forbid-prop-types": ["error", {"forbid": ["any", "array"]}], // Forbid certain propTypes
    "react/no-danger": "error", // Prevent usage of dangerous JSX properties
    "react/no-deprecated": "error", // Prevent usage of deprecated methods
    "react/no-did-mount-set-state": "error", // Prevent usage of setState in componentDidMount
    "react/no-did-update-set-state": "error", // Prevent usage of setState in componentDidUpdate
    "react/no-direct-mutation-state": "error", // Prevent direct mutation of this.state
    "react/no-is-mounted": "error", // Prevent usage of isMounted
    "react/no-multi-comp": "off", // Prevent multiple component definition per file
    "react/no-set-state": "off", // Prevent usage of setState
    "react/no-string-refs": "error", // Prevent using string references in ref attribute.
    "react/no-unknown-property": "error", // Prevent usage of unknown DOM property
    "react/prefer-es6-class": "off", // Enforce ES5 or ES6 class for React Components
    "react/prefer-stateless-function": "off", // Enforce stateless React Components to be written as a pure function
    "react/prop-types": "error", // Prevent missing props validation in a React component definition
    "react/react-in-jsx-scope": "error", // Prevent missing React when using JSX
    "react/self-closing-comp": "error", // Prevent extra closing tags for components without children
    "react/sort-comp": "error", // Enforce component methods order
    "react/jsx-wrap-multilines": "error", // Prevent missing parentheses around multilines JSX


    // JSX-specific rules
    "react/jsx-boolean-value": ["error", "always"], // Enforce boolean attributes notation in JSX
    "react/jsx-closing-bracket-location": ["error", {"selfClosing": "after-props", "nonEmpty": "after-props"}], // Validate closing bracket location in JSX
    "react/jsx-curly-spacing": ["error", "never"], // Enforce or disallow spaces inside of curly braces in JSX attributes
    "react/jsx-equals-spacing": "error", // Enforce or disallow spaces around equal signs in JSX attributes
    "react/jsx-handler-names": ["error", {"eventHandlerPrefix": "on", "eventHandlerPropPrefix": "on"}], // Enforce event handler naming conventions in JSX
    "react/jsx-indent-props": ["error", 2], // Validate props indentation in JSX
    "react/jsx-indent": ["error", "tab"], // Validate JSX indentation
    "react/jsx-key": "error", // Validate JSX has key prop when in array or iterator
    "react/jsx-max-props-per-line": ["error", {"maximum": 4}], // Limit maximum of props on a single line in JSX
    "react/jsx-no-bind": ["error", {"allowArrowFunctions": true}], // Prevent usage of .bind() and arrow functions in JSX props
    "react/jsx-no-duplicate-props": ["error", {"ignoreCase": true}], // Prevent duplicate props in JSX
    "react/jsx-no-literals": "off", // Prevent usage of unwrapped JSX strings
    "react/jsx-no-undef": "error", // Disallow undeclared variables in JSX
    "react/jsx-pascal-case": "error", // Enforce PascalCase for user-defined JSX components
    "react/jsx-sort-prop-types": "off", // Enforce propTypes declarations alphabetical sorting
    "react/jsx-sort-props": "off", // Enforce props alphabetical sorting
    "react/jsx-space-before-closing": ["error", "always"], // Validate spacing before closing bracket in JSX
    "react/jsx-uses-react": "error", // Prevent React to be incorrectly marked as unused
    "react/jsx-uses-vars": "error" // Prevent variables used in JSX to be incorrectly marked as unused
  }
}
